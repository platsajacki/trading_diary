# Generated by Django 5.2 on 2025-05-07 11:46

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FinancialAsset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Дата и время изменения')),
                ('ticker', models.CharField(db_index=True, max_length=50, verbose_name='Тикер')),
                (
                    'type',
                    models.CharField(
                        choices=[('ST', 'Акция'), ('CR', 'Валюта'), ('CC', 'Криптовалюта')],
                        max_length=2,
                        verbose_name='Тип актива',
                    ),
                ),
                (
                    'market',
                    models.CharField(
                        choices=[
                            ('SP', 'Спот'),
                            ('FU', 'Фьючерсы'),
                            ('OP', 'Опционы'),
                            ('MA', 'Маржинальная торговля'),
                        ],
                        max_length=2,
                        verbose_name='Рынок',
                    ),
                ),
                (
                    'exchange',
                    models.CharField(
                        choices=[('ByBit', 'ByBit'), ('KuCoin', 'KuCoin')], max_length=50, verbose_name='Биржа'
                    ),
                ),
            ],
            options={
                'verbose_name': 'Финансовый актив',
                'verbose_name_plural': 'Финансовые активы',
                'constraints': [
                    models.UniqueConstraint(fields=('ticker', 'type', 'market', 'exchange'), name='unique_asset')
                ],
            },
        ),
        migrations.CreateModel(
            name='TradingPair',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Дата и время изменения')),
                ('traded', models.BooleanField(default=True, verbose_name='Торгуется')),
                (
                    'base_asset',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='base_trading_pairs',
                        to='accounting.financialasset',
                        verbose_name='Базовый актив',
                    ),
                ),
                (
                    'quote_asset',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='quote_trading_pairs',
                        to='accounting.financialasset',
                        verbose_name='Котируемый актив',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Торговая пара',
                'verbose_name_plural': 'Торговые пары',
            },
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Дата и время изменения')),
                (
                    'is_closed',
                    models.BooleanField(
                        default=False, help_text='Флаг, указывающий, закрыта ли позиция', verbose_name='Закрыта'
                    ),
                ),
                (
                    'mark_price',
                    models.DecimalField(
                        decimal_places=10,
                        help_text='Текущая рыночная цена, используемая для оценки позиции',
                        max_digits=22,
                        verbose_name='Маркированная цена',
                    ),
                ),
                (
                    'side',
                    models.CharField(
                        choices=[('LONG', 'Long'), ('SHORT', 'Short')], max_length=10, verbose_name='Направление'
                    ),
                ),
                ('size', models.DecimalField(decimal_places=10, max_digits=22, verbose_name='Размер')),
                (
                    'position_value',
                    models.DecimalField(decimal_places=10, max_digits=22, verbose_name='Стоимость позиции'),
                ),
                ('entry_price', models.DecimalField(decimal_places=10, max_digits=22, verbose_name='Цена входа')),
                ('leverage', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Кредитное плечо')),
                (
                    'liq_price',
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        help_text='Цена, при достижении которой позиция будет ликвидирована системой',
                        max_digits=22,
                        null=True,
                        verbose_name='Цена ликвидации',
                    ),
                ),
                (
                    'take_profit',
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=22, null=True, verbose_name='Тейк-профит'
                    ),
                ),
                (
                    'stop_loss',
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=22, null=True, verbose_name='Стоп-лосс'
                    ),
                ),
                (
                    'trailing_stop',
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=22, null=True, verbose_name='Трейлинг-стоп'
                    ),
                ),
                (
                    'session_avg_price',
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        help_text='Средняя цена входа за текущую торговую сессию',
                        max_digits=22,
                        null=True,
                        verbose_name='Ср. цена сессии',
                    ),
                ),
                ('opened_at', models.DateTimeField(verbose_name='Время создания позиции')),
                ('closed_at', models.DateTimeField(blank=True, null=True, verbose_name='Время закрытия позиции')),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='positions',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Пользователь',
                    ),
                ),
                (
                    'trading_pair',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='positions',
                        to='accounting.tradingpair',
                        verbose_name='Торговая пара',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Позиция',
                'verbose_name_plural': 'Позиции',
            },
        ),
        migrations.AddConstraint(
            model_name='tradingpair',
            constraint=models.UniqueConstraint(fields=('base_asset', 'quote_asset'), name='unique_pair'),
        ),
    ]
