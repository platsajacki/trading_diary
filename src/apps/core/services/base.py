from abc import ABCMeta, abstractmethod
from typing import Any

from core.exceptions import NotImplementedMethodError


class BaseService(metaclass=ABCMeta):
    """
    Абстрактный базовый класс для определения интерфейса сервисов.

    Этот класс предназначен для использования в качестве базового класса для создания конкретных
    реализаций сервисов. Он определяет общий интерфейс, который должны реализовать все
    производные классы, чтобы обеспечить единообразие в работе сервисов.

    Методы:
        act() -> Any:
            Абстрактный метод, который должен быть реализован в дочерних классах. Этот метод
            отвечает за выполнение основной логики сервиса.
        __call__() -> Any:
            Вызывает основной метод `act()`, обеспечивая возможность использования экземпляра сервиса как функции.

    Исключения:
        NotImplementedError:
            Если метод `act` не реализован в дочернем классе, будет вызвано это исключение.

    Пример:
        class ConcreteService(BaseService):
            def act(self) -> Any:
                Реализация логики сервиса
                pass
    """

    def __call__(self) -> Any:
        return self.act()

    @abstractmethod
    def act(self) -> Any:
        """
        Абстрактный метод. Отвечает за общую локику сервиса.

        Исключение:
            NotImplementedMethodError: Если метод не реализован в дочернем классе, будет вызвано это исключение.
        """
        raise NotImplementedMethodError(self.__class__.__name__, self.act.__name__)


class DataFetcherService(BaseService):
    """
    Сервис для извлечения данных из внешнего источника.

    Этот класс отвечает за получение данных из внешнего источника. Конкретные реализации
    этого класса должны предоставить механизм для извлечения данных.

    Методы:
        fetch_data() -> Any:
            Метод для извлечения данных из внешнего источника. Должен быть реализован в дочерних классах.
        act() -> Any:
            Абстрактный метод, который должен быть реализован в дочерних классах. Этот метод
            отвечает за выполнение основной логики сервиса.
        __call__() -> Any:
            Вызывает основной метод `act()`, обеспечивая возможность использования экземпляра сервиса как функции.

    Исключения:
        NotImplementedError:
            Если метод `fetch_data` или `act` не реализован в дочернем классе, будет вызвано это исключение.
    """

    @abstractmethod
    def fetch_data(self) -> Any:
        """
        Метод для извлечения данных из внешнего источника.

        Этот метод должен быть реализован в дочернем классе и будет отвечать за получение
        данных из источника, такого как API, файл или другой источник.

        Возвращает:
            Any: Извлечённые данные.

        Исключение:
            NotImplementedError: Если метод не реализован в дочернем классе, будет вызвано это исключение.
        """
        raise NotImplementedError(self.__class__.__name__, self.fetch_data.__name__)


class DataProcessorService(BaseService):
    """
    Сервис для обработки данных.

    Этот класс отвечает за обработку данных, полученных из внешнего источника. Конкретные реализации
    этого класса должны предоставить механизм для обработки данных.

    Методы:
        process_data(data: Any) -> Any:
            Метод для обработки данных. Должен быть реализован в дочерних классах.
        act() -> Any:
            Абстрактный метод, который должен быть реализован в дочерних классах. Этот метод
            отвечает за выполнение основной логики сервиса.
        __call__() -> Any:
            Вызывает основной метод `act()`, обеспечивая возможность использования экземпляра сервиса как функции.

    Исключения:
        NotImplementedError:
            Если метод `process_data` не реализован в дочернем классе, будет вызвано это исключение.
    """

    @abstractmethod
    def process_data(self, data: Any) -> Any:
        """
        Метод для обработки извлечённых данных.

        Этот метод должен быть реализован в дочернем классе и будет отвечать за обработку
        данных, полученных из метода `fetch_data`. Обработка может включать очистку данных,
        преобразование формата и другие действия.

        Параметры:
            data (Any): Данные, извлечённые из внешнего источника.

        Возвращает:
            Any: Обработанные данные.

        Исключение:
            NotImplementedError: Если метод не реализован в дочернем классе, будет вызвано это исключение.
        """
        raise NotImplementedError(self.__class__.__name__, self.process_data.__name__)


class DataSaverService(BaseService):
    """
    Сервис для записи данных в базу данных.

    Этот класс отвечает за сохранение обработанных данных в базу данных. Конкретные реализации
    этого класса должны предоставить механизм для записи данных в базу данных.

    Методы:
        save_to_database(processed_data: Any) -> None:
            Метод для записи данных в базу данных. Должен быть реализован в дочерних классах.
        act() -> Any:
            Абстрактный метод, который должен быть реализован в дочерних классах. Этот метод
            отвечает за выполнение основной логики сервиса.
        __call__() -> Any:
            Вызывает основной метод `act()`, обеспечивая возможность использования экземпляра сервиса как функции.

    Исключения:
        NotImplementedError:
            Если метод `save_to_database` или `act` не реализован в дочернем классе, будет вызвано это исключение.
    """

    @abstractmethod
    def save_to_database(self, processed_data: Any) -> None:
        """
        Метод для записи обработанных данных в базу данных.

        Этот метод должен быть реализован в дочернем классе и будет отвечать за сохранение
        данных в базу данных после их обработки.

        Параметры:
            processed_data (Any): Обработанные данные, которые нужно сохранить в базе данных.

        Исключение:
            NotImplementedError: Если метод не реализован в дочернем классе, будет вызвано это исключение.
        """
        raise NotImplementedError(self.__class__.__name__, self.save_to_database.__name__)
