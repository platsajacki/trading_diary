from typing import Any

from core.services.base import DataFetcherService, DataProcessorService, DataSaverService


class DataPipelineService(DataFetcherService, DataProcessorService, DataSaverService):
    """
    Сервис для полного цикла обработки данных: извлечение, обработка и сохранение в базу данных.

    Этот класс объединяет три этапа работы с данными: извлечение данных из внешнего источника,
    их обработку и запись в базу данных. Конкретная реализация этого класса должна предоставить
    механизм для выполнения всех этапов.

    Методы:
        act() -> Any:
            Метод для выполнения основной логики сервиса, включающей извлечение, обработку и
            сохранение данных. Должен быть реализован в дочерних классах.
        __call__() -> Any:
            Вызывает основной метод `act()`, обеспечивая возможность использования экземпляра сервиса как функции.
        fetch_data() -> Any:
            Метод для извлечения данных из внешнего источника. Должен быть реализован в дочерних классах.
        process_data(data: Any) -> Any:
            Метод для обработки извлечённых данных. Должен быть реализован в дочерних классах.
        save_to_database(processed_data: Any) -> None:
            Метод для записи обработанных данных в базу данных. Должен быть реализован в дочерних классах.

    Исключения:
        NotImplementedError:
            Если любой из методов `fetch_data`, `process_data`, `save_to_database` или `act` не реализован
            в дочернем классе, будет вызвано это исключение.
    """

    def act(self) -> Any:
        """
        Выполняет полный процесс обработки данных: извлечение, обработка и сохранение.

        Этот метод последовательно вызывает `fetch_data` для получения данных, `process_data` для
        их обработки и `save_to_database` для записи обработанных данных в базу данных.

        Возвращает:
            Any: Результат выполнения логики сервиса. Можно возвращать результаты, статус выполнения или `None`.
        """
        data = self.fetch_data()
        processed_data = self.process_data(data)
        self.save_to_database(processed_data)
        return processed_data
